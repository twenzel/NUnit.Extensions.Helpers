using FluentAssertions;
using Microsoft.CodeAnalysis.CSharp;
using NUnit.Extensions.Helpers.Generators;

namespace NUnit.Extensions.Helpers.Tests;

public class ConstructorParameterTestGeneratorTests
{
	[Test]
	public void Generates_Simple_Test()
	{
		var inputCompilation = CreateCSharpCompilation("""
using System;
using System.IO;
using NUnit.Framework;

namespace MyApp
{
	public class Document
	{
		private Stream _stream;

		public Document(Stream myStream)
		{
			_stream = myStream ?? throw new ArgumentNullException(nameof(myStream));
		}
	}	
}

namespace Testing
{
	[GenerateConstructorParameterTests(typeof(MyApp.Document))]
	public partial class CtorTests
	{
	}
}
""");

		var generatorResult = TestHelpers.GenerateAndValidateCSharpOutput<ConstructorParameterTestGenerator>(inputCompilation, 1, true);

		generatorResult.GeneratedSources[0].HintName.Should().StartWith("Testing.CtorTests_");
		generatorResult.GeneratedSources[0].SourceText.ToString().Trim().Should().Be("""
// <auto-generated/>
using System;
using FluentAssertions;
using Moq;

namespace Testing;
partial class CtorTests
{
	[Test]
	public void Throws_Exception_When_MyStream_Is_Null()
	{
		Action action = () => new Document(null);
		action.Should().Throw<ArgumentNullException>().Which.ParamName.Should().Be("myStream");
	}

}
""");

	}

	[Test]
	public void Generates_Test_With_BaseClass()
	{
		var inputCompilation = CreateCSharpCompilation("""
using System;
using System.IO;
using NUnit.Framework;

namespace MyApp
{
	public class Document
	{
		private Stream _stream;

		public Document(Stream myStream)
		{
			_stream = myStream ?? throw new ArgumentNullException(nameof(myStream));
		}
	}	
}

namespace Testing
{
	public class MyTests
	{

		[GenerateConstructorParameterTests(typeof(MyApp.Document))]
		public partial class CtorTests : MyTests
		{
		}
	}
}
""");

		var generatorResult = TestHelpers.GenerateAndValidateCSharpOutput<ConstructorParameterTestGenerator>(inputCompilation, 1, true);

		generatorResult.GeneratedSources[0].HintName.Should().StartWith("Testing.MyTests.CtorTests_");
		generatorResult.GeneratedSources[0].SourceText.ToString().Trim().Should().Be("""
// <auto-generated/>
using System;
using FluentAssertions;
using Moq;

namespace Testing;
partial class CtorTests : Testing.MyTests
{
	[Test]
	public void Throws_Exception_When_MyStream_Is_Null()
	{
		Action action = () => new Document(null);
		action.Should().Throw<ArgumentNullException>().Which.ParamName.Should().Be("myStream");
	}

}
""");

	}

	[Test]
	public void Generates_Test_With_Multiple_Parameters()
	{
		var inputCompilation = CreateCSharpCompilation("""
using System;
using System.IO;
using NUnit.Framework;

namespace MyApp
{
	public class Document
	{
		private Stream _stream;
		private IFileTester _fileTester;
		private IOtherFilter _filter;

		public Document(Stream myStream, IFileTester fileTester, IOtherFilter filter)
		{
			_stream = myStream ?? throw new ArgumentNullException(nameof(myStream));
			_fileTester = fileTester ?? throw new ArgumentNullException(nameof(fileTester));
			_filter = filter ?? throw new ArgumentNullException(nameof(filter));
		}
	}

	public interface IFileTester {}
	public interface IOtherFilter {}
}

namespace Testing
{
	[GenerateConstructorParameterTests(typeof(MyApp.Document))]
	public partial class CtorTests
	{
	}
}
""");

		var generatorResult = TestHelpers.GenerateAndValidateCSharpOutput<ConstructorParameterTestGenerator>(inputCompilation, 1, true);

		generatorResult.GeneratedSources[0].SourceText.ToString().Trim().Should().Be("""
// <auto-generated/>
using System;
using FluentAssertions;
using Moq;

namespace Testing;
partial class CtorTests
{
	[Test]
	public void Throws_Exception_When_MyStream_Is_Null()
	{
		Action action = () => new Document(null, null, null);
		action.Should().Throw<ArgumentNullException>().Which.ParamName.Should().Be("myStream");
	}

	[Test]
	public void Throws_Exception_When_FileTester_Is_Null()
	{
		Action action = () => new Document(Mock.Of<System.IO.Stream>(), null, null);
		action.Should().Throw<ArgumentNullException>().Which.ParamName.Should().Be("fileTester");
	}

	[Test]
	public void Throws_Exception_When_Filter_Is_Null()
	{
		Action action = () => new Document(Mock.Of<System.IO.Stream>(), Mock.Of<MyApp.IFileTester>(), null);
		action.Should().Throw<ArgumentNullException>().Which.ParamName.Should().Be("filter");
	}

}
""");

	}

	private static CSharpCompilation CreateCSharpCompilation(string source)
	{
		return TestHelpers.CreateCSharpCompilation(source, Sources.GENERATE_CONSTRUCTOR_PARAMETER_TESTS_ATTRIBUTE_SOURCE);
	}
}